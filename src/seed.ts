import path from 'path'
import { fileURLToPath } from 'url'
import dotenv from 'dotenv'
import payload from 'payload'
import type { User, Media } from './payload-types'
import payloadConfig from './payload.config'

const __filename = fileURLToPath(import.meta.url)
const dirname = path.dirname(__filename)

dotenv.config({
  path: path.resolve(dirname, '../.env'),
})

export const seed = async () => {
  console.log('Seeding database...')

  try {
    await payload.init({ config: payloadConfig })
  } catch (e) {
    console.error('Error initializing Payload:', e)
    process.exit(1)
  }

  // 1) Find or create admin
  console.log('--- Finding or creating default admin user... ---')
  let adminUser: User | undefined
  try {
    const { docs } = await payload.find({
      collection: 'users',
      where: { email: { equals: 'dev@mcrc.org' } },
      limit: 1,
    })
    if (docs.length > 0) {
      adminUser = docs[0]
      console.log('✅ Found existing admin user.')
    } else {
      console.log('No admin user found. Creating one...')
      adminUser = await payload.create({
        collection: 'users',
        data: {
          email: 'dev@mcrc.org',
          password: 'password',
          name: 'Dev Admin',
          role: 'admin',
        },
      })
      console.log('✅ Default admin user created.')
    }
  } catch (e: unknown) {
    console.error(`Error finding or creating admin user: ${e}`)
  }

  if (!adminUser) {
    console.error('Could not create or find an admin user. Aborting further seeding.')
    process.exit(1)
  }

  // 2) Upload media
  console.log('\n--- Uploading placeholder media... ---')
  let eventImage: Media | undefined
  let postImage1: Media | undefined
  let rjImage: Media | undefined
  try {
    ;[eventImage, postImage1, rjImage] = await Promise.all([
      payload.create({
        collection: 'media',
        data: { alt: 'Placeholder for events' },
        // Prefer a project-relative absolute path:
        filePath: path.resolve(
          dirname,
          '../public/images/restorative-justice/restorative-justice-couch.jpg',
        ),
      }),
      payload.create({
        collection: 'media',
        data: { alt: 'Placeholder for blog posts' },
        filePath: path.resolve(dirname, 'seed-media/post-placeholder-1.jpg'),
      }),
      payload.create({
        collection: 'media',
        data: { alt: 'People in a restorative dialogue' },
        filePath: path.resolve(
          dirname,
          '../public/images/restorative-justice/restorative-dialogues.jpg',
        ),
      }),
    ])
    console.log('✅ Placeholder media uploaded.')
  } catch (err) {
    console.error('Error uploading media:', err)
  }

  // 3) Sample Blog Post (matches current posts schema: contentHtml + optional sections)
  console.log('\n--- Creating sample blog posts... ---')
  try {
    if (postImage1) {
      await payload.create({
        collection: 'posts',
        data: {
          title: 'Our First Blog Post',
          excerpt:
            'Welcome to the MCRC blog—resources, stories, and tools for peaceful communities.',
          heroImage: postImage1.id,
          authors: [adminUser.id],
          // Your current generated types expect `contentHtml` (string), not a Lexical JSON:
          contentHtml: [
            '<p>This is the content of our first seeded blog post. Welcome!</p>',
            '<p>We help neighbors, families, and organizations navigate conflict with dignity and respect.</p>',
          ].join('\n'),
          // Optional sections – titles are enough; `anchor` is generated by hooks if configured.
          sections: [
            {
              title: 'What Mediation Is',
              contentHtml: '<p>Mediation is a guided conversation.</p>',
            },
            {
              title: 'When To Consider Mediation',
              contentHtml: '<p>Use it early, use it often.</p>',
            },
            { title: 'How To Get Started', contentHtml: '<p>Reach out to our team to begin.</p>' },
          ],
          _status: 'published',
        },
      })
      console.log('✅ Sample blog posts created.')
    } else {
      console.log('Skipping blog post creation due to missing image.')
    }
  } catch (err) {
    console.error('Error creating blog posts:', err)
  }

  // 4) Sample Events (unchanged structure; already matches your types)
  console.log('\n--- Creating sample events... ---')
  try {
    if (eventImage && rjImage) {
      // Event 1
      await payload.create({
        collection: 'events',
        data: {
          name: 'Community Peace Circle',
          meta: {
            slug: 'community-peace-circle-seed',
            status: 'published',
            eventType: 'Community Meeting',
          },
          summary:
            'Join us for a monthly peace circle to discuss community issues and build connections.',
          content: [
            {
              blockType: 'textBlock',
              text: {
                root: {
                  type: 'root',
                  children: [
                    {
                      type: 'paragraph',
                      version: 1,
                      children: [
                        {
                          type: 'text',
                          version: 1,
                          text: 'An open and inclusive space for community members to share perspectives and foster understanding. All are welcome.',
                        },
                      ],
                    },
                  ],
                  direction: 'ltr',
                  format: '',
                  indent: 0,
                  version: 1,
                },
              },
            },
          ] as any,
          eventStartTime: new Date('2025-07-15T18:00:00.000Z').toISOString(),
          eventEndTime: new Date('2025-07-15T20:00:00.000Z').toISOString(),
          modality: 'in_person',
          location: {
            venueName: 'Columbia Public Library',
            address: '10375 Little Patuxent Pkwy, Columbia, MD',
          },
          isFree: true,
          isRegistrationRequired: false,
          featuredImage: eventImage.id,
        },
      })

      // Event 2
      await payload.create({
        collection: 'events',
        data: {
          name: 'Introduction to Mediation (Online)',
          meta: {
            slug: 'intro-to-mediation-online',
            status: 'published',
            eventType: 'Workshop',
          },
          summary:
            'A beginner-friendly online workshop covering the fundamental skills and principles of mediation.',
          content: [
            {
              blockType: 'textBlock',
              text: {
                root: {
                  type: 'root',
                  children: [
                    {
                      type: 'paragraph',
                      version: 1,
                      children: [
                        {
                          type: 'text',
                          version: 1,
                          text: 'This interactive workshop will equip you with the basic understanding and techniques used in mediation.',
                        },
                      ],
                    },
                  ],
                  direction: 'ltr',
                  format: '',
                  indent: 0,
                  version: 1,
                },
              },
            },
          ] as any,
          eventStartTime: new Date('2025-08-05T19:00:00.000Z').toISOString(),
          eventEndTime: new Date('2025-08-05T21:00:00.000Z').toISOString(),
          modality: 'online',
          onlineMeeting: {
            url: 'https://zoom.us/j/123456789',
            details: 'Link will be sent upon registration.',
          },
          isFree: false,
          cost: { amount: 25, currency: 'USD', description: 'per person' },
          isRegistrationRequired: true,
          featuredImage: rjImage.id,
        },
      })

      // Event 3
      await payload.create({
        collection: 'events',
        data: {
          name: 'Restorative Dialogue Training',
          meta: {
            slug: 'restorative-dialogue-training',
            status: 'published',
            eventType: 'Training',
          },
          summary:
            'A deep-dive training session for those interested in facilitating restorative dialogues.',
          content: [
            {
              blockType: 'textBlock',
              text: {
                root: {
                  type: 'root',
                  children: [
                    {
                      type: 'paragraph',
                      version: 1,
                      children: [
                        {
                          type: 'text',
                          version: 1,
                          text: 'Learn the core principles and practices of restorative dialogue to help repair harm and rebuild community.',
                        },
                      ],
                    },
                  ],
                  direction: 'ltr',
                  format: '',
                  indent: 0,
                  version: 1,
                },
              },
            },
          ] as any,
          eventStartTime: new Date('2025-08-20T09:00:00.000Z').toISOString(),
          eventEndTime: new Date('2025-08-20T16:00:00.000Z').toISOString(),
          modality: 'in_person',
          location: { venueName: 'MCRC Training Center', address: '123 Main Street, Columbia, MD' },
          isFree: false,
          cost: { amount: 150, currency: 'USD', description: 'Includes materials and lunch.' },
          isRegistrationRequired: true,
          featuredImage: rjImage.id,
        },
      })

      // Event 4
      await payload.create({
        collection: 'events',
        data: {
          name: 'Volunteer Information Session',
          meta: {
            slug: 'volunteer-info-session',
            status: 'published',
            eventType: 'Information Session',
          },
          summary:
            'Learn more about how you can contribute to our mission by becoming a volunteer mediator or community member.',
          content: [
            {
              blockType: 'textBlock',
              text: {
                root: {
                  type: 'root',
                  children: [
                    {
                      type: 'paragraph',
                      version: 1,
                      children: [
                        {
                          type: 'text',
                          version: 1,
                          text: 'Join us for this informal session to meet our team, ask questions, and learn about the application process.',
                        },
                      ],
                    },
                  ],
                  direction: 'ltr',
                  format: '',
                  indent: 0,
                  version: 1,
                },
              },
            },
          ] as any,
          eventStartTime: new Date('2025-09-10T18:30:00.000Z').toISOString(),
          eventEndTime: new Date('2025-09-10T19:30:00.000Z').toISOString(),
          modality: 'hybrid',
          location: { venueName: 'MCRC Office', address: '123 Main Street, Columbia, MD' },
          onlineMeeting: { url: 'https://zoom.us/j/987654321' },
          isFree: true,
          isRegistrationRequired: true,
          externalRegistrationLink: 'https://example.com/volunteer-signup',
          featuredImage: rjImage.id,
        },
      })

      console.log('✅ Sample events created.')
    } else {
      console.log('Skipping event creation due to missing images.')
    }
  } catch (err) {
    console.error('Error creating events:', err)
  }

  // 5) Intake Form
  console.log('\n--- Creating intake form... ---')
  try {
    await payload.create({
      collection: 'forms',
      data: {
        title: 'Conflict Resolution Intake Form',
        submitButtonLabel: 'Submit Inquiry',
        confirmationType: 'message',
        confirmationMessage: {
          root: {
            type: 'root',
            children: [
              {
                type: 'paragraph',
                version: 1,
                children: [
                  {
                    type: 'text',
                    version: 1,
                    text: 'Thank you! Your intake form has been submitted successfully. A coordinator will be in touch with you shortly.',
                  },
                ],
              },
            ],
            direction: 'ltr',
            format: '',
            indent: 0,
            version: 1,
          },
        } as any,
        fields: [
          { blockType: 'text', name: 'fullName', label: 'Full Name', required: true },
          { blockType: 'text', name: 'phoneNumber', label: 'Phone Number', required: true },
          { blockType: 'email', name: 'emailAddress', label: 'Email Address', required: false },
        ],
      },
    })
    console.log('✅ Intake form created.')
  } catch (err) {
    console.error('Error creating intake form:', err)
  }

  console.log('\n--- Seeding complete! ---')
  process.exit(0)
}

seed()
